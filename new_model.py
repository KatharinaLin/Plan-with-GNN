# Copyright 2018 The GraphNets Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""Model architectures for the demos."""



import modules
import utils_tf
import blocks
import numpy as np
import tensorflow as tf
import sonnet as snt

NUM_LAYERS = 2  # Hard-code number of layers in the edge/node/global models.
LATENT_SIZE = 16  # Hard-code latent layer sizes for demos.


def make_mlp_model():
  """Instantiates a new MLP, followed by LayerNorm.

  The parameters of each new MLP are not shared with others generated by
  this function.

  Returns:
    A Sonnet module which contains the MLP and LayerNorm.
  """
  regularizers = {"w": tf.contrib.layers.l1_regularizer(scale=0.5),
                  "b": tf.contrib.layers.l2_regularizer(scale=0.5)}
  return snt.Sequential([
      snt.nets.MLP([100,100], activate_final=True),
      snt.LayerNorm()
  ])

def make_atom_state_mlp_model():
  regularizers = {"w": tf.contrib.layers.l1_regularizer(scale=0.5),
                  "b": tf.contrib.layers.l2_regularizer(scale=0.5)}
  return snt.Sequential([
      snt.nets.MLP([100,100], activate_final=True),
    snt.LayerNorm()
  ])

def make_heu_mlp_model():
  """Instantiates a new MLP, followed by LayerNorm.

  The parameters of each new MLP are not shared with others generated by
  this function.

  Returns:
    A Sonnet module which contains the MLP and LayerNorm.
  """
  regularizers = {"w": tf.contrib.layers.l1_regularizer(scale=0.5),
                  "b": tf.contrib.layers.l2_regularizer(scale=0.5)}
  initializers = {
        "w": tf.truncated_normal_initializer(stddev=1.0),
        "b": tf.truncated_normal_initializer(stddev=1.0),
  }
  return snt.Sequential([
      snt.nets.MLP([150,150], activate_final=True, initializers=initializers),
    snt.LayerNorm()
  ])

def make_rnn_model():
  hidden_size = 20
  valid_regularizers = {
    "in_to_hidden": {
        "w": tf.nn.l2_loss,
      },
    "hidden_to_hidden": {
        "b": tf.nn.l2_loss,
    }
  }
  return snt.Sequential([
      snt.VanillaRNN(name="rnn", hidden_size=hidden_size, regularizers=valid_regularizers),
      snt.LayerNorm()
  ])

class MLPGraphIndependent(snt.AbstractModule):
  """GraphIndependent with MLP edge, node, and global models."""

  def __init__(self, name="MLPGraphIndependent"):
    super(MLPGraphIndependent, self).__init__(name=name)
    with self._enter_variable_scope():
      self._network = modules.GraphIndependent(
          edge_model_fn=make_mlp_model,
          node_model_fn=make_mlp_model,
          global_model_fn=make_mlp_model)

  def _build(self, inputs):
    return self._network(inputs)




class Encoder(snt.AbstractModule):
  """GraphIndependent with MLP edge, node models."""

  def __init__(self, name="Encoder"):
    super(Encoder, self).__init__(name=name)
    with self._enter_variable_scope():
      self._network = modules.GraphIndependent(
          edge_model_fn=make_mlp_model)

  def _build(self, inputs):
    return self._network(inputs)



class MLPGraphNetwork(snt.AbstractModule):
  """GraphNetwork with MLP edge, node, and global models."""

  def __init__(self, name="MLPGraphNetwork"):
    super(MLPGraphNetwork, self).__init__(name=name)
    with self._enter_variable_scope():
      self._network = modules.GraphNetwork(make_atom_state_mlp_model, make_mlp_model, make_mlp_model)

  def _build(self, inputs):
    return self._network(inputs)

  def getInitial(self, inputs):
    return self._network.getInitialState(inputs)





class SigmoidEdgeProcessingModule(snt.AbstractModule):
  def __init__(self, edge_output_size, name="sigmoid_edge_output_func"):
    super(SigmoidEdgeProcessingModule, self).__init__(name=name)
    self._edge_output_size = edge_output_size
    with self._enter_variable_scope():  # This line is crucial!
      regularizers = {"w": tf.contrib.layers.l1_regularizer(scale=0.1),
                      "b": tf.contrib.layers.l2_regularizer(scale=0.1)}
      initializers = {"w": tf.truncated_normal_initializer(stddev=1.0),
                      "b": tf.truncated_normal_initializer(stddev=1.0)}
      self._lin_mod = snt.Linear(self._edge_output_size, name="state_edge_output")  # Construct submodule here.

  def _build(self, inputs):
      return tf.nn.sigmoid(self._lin_mod(inputs))  # Connect previously constructed mod.

class TanhEdgeProcessingModule(snt.AbstractModule):
  def __init__(self, edge_output_size, name="tanh_edge_output_func"):
    super(TanhEdgeProcessingModule, self).__init__(name=name)
    self._edge_output_size = edge_output_size
    with self._enter_variable_scope():  # This line is crucial!
      regularizers = {"w": tf.contrib.layers.l1_regularizer(scale=0.1),
                        "b": tf.contrib.layers.l2_regularizer(scale=0.1)}
      initializers = {"w": tf.truncated_normal_initializer(stddev=1.0),
                        "b": tf.truncated_normal_initializer(stddev=1.0)}
      self._lin_mod = snt.Linear(self._edge_output_size, name="other_edge_output")  # Construct submodule here.

  def _build(self, inputs):
    return tf.nn.tanh(self._lin_mod(inputs))  # Connect previously constructed mod.




class GraphProcess(snt.AbstractModule):
  """Full encode-process-decode model.

  The model we explore includes three components:
  - An "Encoder" graph net, which independently encodes the edge, node, and
    global attributes (does not compute relations etc.).
  - A "Core" graph net, which performs N rounds of processing (message-passing)
    steps. The input to the Core is the concatenation of the Encoder's output
    and the previous output of the Core (labeled "Hidden(t)" below, where "t" is
    the processing step).
  - A "Decoder" graph net, which independently decodes the edge, node, and
    global attributes (does not compute relations etc.), on each message-passing
    step.
                t=t+1
      Hidden(t)<-----Hidden(t+1)
        |              ^
        |  *------*    |  *---------*
        |  |      |    |  |         |
        *->| Core |----*->| Decoder |---> Output(t)
           |      |       |         |
           *------*       *---------*
  """

  def __init__(self,
               dimension,
               edge_output_size=None,
               node_output_size=None,
               global_output_size=None,
               name="GraphProcess"):
    super(GraphProcess, self).__init__(name=name)
    self._edge_encoder = make_rnn_model()
    self._proposition_encoder = make_rnn_model()
    self._edge_decoder = make_rnn_model()
    self._core = MLPGraphNetwork()
    self._decoder = MLPGraphIndependent()
    self._edge_size = edge_output_size
    self._dimension = dimension


    # Transforms the outputs into the appropriate shapes.
    if edge_output_size is None:
      edge_fn = None
    else:
      atom_state_edge_fn = lambda: SigmoidEdgeProcessingModule(edge_output_size)
    if node_output_size is None:
      node_fn = None
    else:
      node_fn = lambda: snt.Linear(node_output_size, name="node_output")
    if global_output_size is None:
      global_fn = None
    else:
      global_fn = lambda: snt.Linear(global_output_size, name="global_output")
    with self._enter_variable_scope():
      self._output_transform = modules.GraphIndependent(edge_model_fn=atom_state_edge_fn,
                                                          node_model_fn=node_fn, global_model_fn=global_fn)









  def action_replace(self, graph, act_vec):
    return graph.replace(globals=act_vec)

  def atomNode_replace(self, input_g):
    state_node = input_g.nodes
    state_node = tf.stack([state_node])
    return input_g.replace(nodes=state_node)







  def _build(self, input_op, action_sequence, num_processing_steps):
    output_trans = input_op
    output_ops = []
    output_vecs = []

    for i in range(num_processing_steps):
      output_trans = self.getInitialVecForState(output_trans)
      output_vecs.append(output_trans)
      latent, output_trans = self.processOneStep(output_trans, action_sequence[i])
      output_ops.append(latent.edges)
    output_trans = self.getInitialVecForState(output_trans)
    output_vecs.append(output_trans)
    return output_ops, output_vecs



  def getInitialVecForState(self, graph):
    latent = self._core.getInitial(graph)
    return latent







  def processOneStep(self, latent, action_vec):
    core_input = self.action_replace(latent, action_vec)
    core_input = self._core.getInitial(core_input)
    latent = self._core(core_input)
    output_trans = self._output_transform(latent)
    updated_edges = tf.round(output_trans.edges)
    round_output_trans = output_trans.replace(edges=updated_edges)
    round_output_trans = self.getInitialVecForState(round_output_trans)
    output_trans = output_trans.replace(nodes=round_output_trans.nodes)


    return output_trans, round_output_trans


class HeuristicNetwork(snt.AbstractModule):
  def __init__(self, name="HeuristicNetwork", size=None):
    super(HeuristicNetwork, self).__init__(name=name)
    with self._enter_variable_scope():
      self._network = make_heu_mlp_model()
      node_output_size = 50
      if size is None:
        self.heu_fn = None
      else:
        self.heu_fn = snt.Linear(size, name="heu_output")
      self.node_fn = snt.Linear(node_output_size, name="node_outputs")

  def _build(self, inputs):
    inputs = self.node_fn(inputs)
    n_out = self._network(inputs)
    return tf.nn.sigmoid(self.heu_fn(n_out))

    # return ((n_out))


